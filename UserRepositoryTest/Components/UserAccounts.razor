@inject IUserAccountService UserAccountService

<h6 class="border-bottom p-2 mb-0 d-flex align-items-center">
    <span class="ellipsis">@_selectedUser?.Name</span>
    <span class="flex-grow-1 text-nowrap">&nbsp;> Accounts</span>
    <button type="button" class="btn btn-light btn-sm ms-auto text-nowrap" @onclick="CreateAccount">Create new</button>
</h6>
@foreach (var account in _accounts)
{
    var color = account.IsActive ? "#5e919f" : "gray";
    <div class="d-flex text-body-secondary p-2">
        <svg class="bd-placeholder-img flex-shrink-0 me-2 rounded" width="32" height="32" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder" preserveAspectRatio="xMidYMid slice" focusable="false">
            <title>Placeholder</title>
            <rect width="100%" height="100%" fill="@color"></rect>
        </svg>
        <div class="pb-3 mb-0 small lh-sm border-bottom w-100">
            <div class="d-flex justify-content-between">
                <strong class="text-gray-dark ellipsis">@account.Name</strong>
                <div class="form-switch">
                    <input type="checkbox" class="form-check-input" role="switch" checked="@account.IsActive" @oninput="(args) => SetActive(account, args)" />
                </div>
            </div>
            <span class="d-block id-span">#@account.Id</span>
        </div>
    </div>
}

@code {
    private IEnumerable<AccountDto> _accounts = [];
    private UserDto? _selectedUser = null!;

    [CascadingParameter]
    public IInputModal InputModal { get; set; } = null!; 

    [CascadingParameter]
    public IToastMessageHandler Toast { get; set; } = null!;

    [Parameter, EditorRequired]
    public required Guid SelectedUserId { get; set; }

    protected override void OnParametersSet()
    {
        _selectedUser = UserAccountService.GetUser(SelectedUserId);
        _accounts = UserAccountService.GetAccounts(SelectedUserId);
    }

    private async Task CreateAccount()
    {
        var accountName = await InputModal.Show("Create New Account", "Account Name");
        if (accountName is null) return;

        if (!string.IsNullOrEmpty(accountName))
        {
            if (UserAccountService.AddAccount(SelectedUserId, accountName))
            {
                _accounts = UserAccountService.GetAccounts(SelectedUserId);
                Toast.Success("Account has been successfully created!", autoHide: true);
                return;
            }
        }

        Toast.Danger("Account creation failed.", autoHide: true);
    }

    private void SetActive(AccountDto account, ChangeEventArgs args)
    {
        var active = (bool?)args.Value;
        UserAccountService.SetAccountActive(SelectedUserId, account.Id, active ?? account.IsActive);
    }
}
